
#define MEDIUMP_FLT_MAX 65504.0
#define saturateMediump(x) min(x, MEDIUMP_FLT_MAX)

/*********************************************************************************
Flament BRDF

f_r = D * G * F / (4 * (n * v) * (n * l))
V = G / (4 * (n * v) * (n * l))
f_r = D * V * F


**********************************************************************************/

//Walter GGX??????????Trowbridge_Reitz
float D_GGX(float NoH, float roughness)
{
    float a = NoH * roughness;
    float k = roughness / (1.0 - NoH * NoH + a * a);
    return k * k * PI_INV;
}

//??????Walter GGX???
float D_GGX_Optimized(float rougness, float NoH, vec3 n, vec3 h)
{
    vec3 NxH = cross(n, h);
    float a = NoH * rougness;
    float k = rougness / (dot(NxH, NxH) + a * a);
    float d = k * k * PI_INV;
    return saturateMediump(d);
}

//????????????
float V_SmithGGXCorrelated(float NoV, float NoL, float roughness)
{
    float a2 = roughness * roughness;
    float GGXV = NoL * sqrt(NoV * NoV * (1.0 - a2) + a2);
    float GGXL = NoV * sqrt(NoL * NoL * (1.0 - a2) + a2);
    return 0.5 / (GGXL + GGXV);
}

//????????????????
float V_SmithGGXCorrelatedFast(float NoV, float NoL, float roughness)
{
    float a = roughness;
    float GGXV = NoL * (NoV * (1.0 - a) + a);
    float GGXL = NoV * (NoL * (1.0 - a) + a);
    return 0.5 / (GGXL + GGXV);
}

//Hammon???????????
float V_SmithGGXCorrelatedFast_Hammon(float NoV, float NoL, float roughness)
{
    float a = roughness;
    float n1 = 2.0 * NoV * NoL;
    float n2 = NoL + NoV;
    return 0.5 / mix(n1, n2, a);
}

//Cook-Torrance????BRDF??Fresnel??
vec3 F_Schlick(float VoH, vec3 f0, float f90)
{
    return f0 + (vec3(f90) - f0) * pow(1.0 - VoH, 5.0);
}

float F_Schlick(float VoH, float f0, float f90)
{
    return f0 + (f90 - f0) * pow(1.0 - VoH, 5.0);
}

//??f90?????1??Fresnel??
vec3 F_Schlick_F90(float VoH, vec3 f0)
{
    float f = pow(1.0 - VoH, 5.0);
    return f + f0 * (1.0 - f);
}

//Lambertian diffuse BRDF : 1.0 / PI
float Fd_Lambert()
{
    return PI_INV;
}

//Disney diffuse BRDF
float Fd_Burley(float NoV, float NoL, float LoH, float roughness)
{
    float f90 = 0.5 + 2.0 * roughness * LoH * LoH;
    float lightScatter = F_Schlick(NoL, 1.0, f90);
    float viewScatter = F_Schlick(NoV, 1.0, f90);
    return lightScatter * viewScatter * PI_INV;
}

vec3 Standard_BRDF_Torrance_DVF(vec3 diffuse_color, vec3 v, vec3 l, vec3 n, float r, vec3 f0, float f90)
{
    vec3 h = normalize(v + l);
    
    float NoV = abs(dot(n, v)) + 1e-5;
    float NoL = clamp(dot(n, l), 0.0001, 1.0);
    float NoH = clamp(dot(n, l), 0.0001, 1.0);
    float LoH = clamp(dot(l, h), 0.0001, 1.0);
    
    float D = D_GGX(NoH, r);
    vec3 F = F_Schlick_F90(LoH, f0);
    float V = V_SmithGGXCorrelated(NoV, NoL, r);
    
    //???ï¿½X??BRDF
    vec3 Fr = (D * V) * F;
    
    //??????BRDF
    vec3 Fd = diffuse_color * Fd_Burley(NoV, NoL, LoH, r);
    
    return Fr + Fd;
}